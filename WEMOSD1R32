#include <WiFi.h>
#include <Preferences.h>

// Definir los números de pin para las entradas y salidas
const int input1Pin = 18;  // Entrada 1
const int input2Pin = 19;  // Entrada 2
const int input3Pin = 23;  // Entrada 3
const int input4Pin = 5;   // Entrada 4

const int relay1Pin = 14;   // Relé 1
const int relay2Pin = 27;   // Relé 2
const int relay3Pin = 16;   // Relé 3
const int relay4Pin = 17;   // Relé 4

// Umbrales de tiempo predeterminados en milisegundos
unsigned long threshold1 = 1000;  // 3 segundos
unsigned long threshold2 = 1000;  // 6 segundos
unsigned long threshold3 = 1000;  // 9 segundos
unsigned long threshold4 = 1000; // 12 segundos

// Variables para rastrear el tiempo que las entradas han estado en LOW
unsigned long input1Time = 0;
unsigned long input2Time = 0;
unsigned long input3Time = 0;
unsigned long input4Time = 0;

// Estado de las entradas
bool lastInput1State = LOW;
bool lastInput2State = LOW;
bool lastInput3State = LOW;
bool lastInput4State = LOW;

// Configuración de la red
const char* ssid = "24fib";  // Cambiar a tu SSID
const char* password = "XahPI8bSOhoRc&XVk1&1X";  // Cambiar a tu contraseña

// Credenciales de inicio de sesión
const char* username = "spad";  // Cambiar a tu nombre de usuario
const char* userPassword = "Argentina2024";  // Cambiar a tu contraseña

WiFiServer server(80);
Preferences preferences;

bool isAuthenticated = false; // Variable para verificar autenticación
unsigned long lastActivityTime = 0; // Tiempo de la última actividad
const unsigned long timeoutDuration = 10 * 60 * 1000; // 10 minutos en milisegundos

void setup() {
    // Inicializar el puerto serie
    Serial.begin(115200);
    
    // Conectar a la red WiFi usando DHCP
    Serial.println("Conectando a la red WiFi...");
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.println("Intentando conectar...");
    }
    
    Serial.println("Conectado a la red WiFi");
    Serial.print("Dirección IP: ");
    Serial.println(WiFi.localIP()); // Mostrar la dirección IP adquirida
    
    // Iniciar el servidor HTTP
    server.begin();
    Serial.println("Servidor HTTP iniciado");

    // Inicializar preferencias
    preferences.begin("thresholds", false); // Nombre del espacio de almacenamiento
    threshold1 = preferences.getUInt("thresh1", 1000); // Cargar umbral 1
    threshold2 = preferences.getUInt("thresh2", 1000); // Cargar umbral 2
    threshold3 = preferences.getUInt("thresh3", 1000); // Cargar umbral 3
    threshold4 = preferences.getUInt("thresh4", 1000); // Cargar umbral 4

    // Inicializar los pines de entrada con resistencias de pull-up internas
    pinMode(input1Pin, INPUT_PULLUP);
    pinMode(input2Pin, INPUT_PULLUP);
    pinMode(input3Pin, INPUT_PULLUP);
    pinMode(input4Pin, INPUT_PULLUP);
    
    // Inicializar los pines de relé
    pinMode(relay1Pin, OUTPUT);
    pinMode(relay2Pin, OUTPUT);
    pinMode(relay3Pin, OUTPUT);
    pinMode(relay4Pin, OUTPUT);
}

void loop() {
    // Verificar conexiones de clientes
    WiFiClient client = server.available();
    if (client) {
        String currentLine = "";
        while (client.connected()) {
            if (client.available()) {
                char c = client.read();
                if (c == '\n') {
                    // Si la línea actual está en blanco, estás listo para enviar una respuesta
                    if (currentLine.length() == 0) {
                        if (!isAuthenticated) {
                            // Enviar página de inicio de sesión
                            sendLoginPage(client);
                        } else {
                            // Verificar timeout
                            if (millis() - lastActivityTime > timeoutDuration) {
                                isAuthenticated = false; // Timeout, requerir nuevo inicio de sesión
                                sendLoginPage(client);
                            } else {
                                // Enviar página principal con configuración de umbrales
                                sendMainPage(client);
                            }
                        }
                        break;
                    } else {
                        // Verificar intento de inicio de sesión
                        if (currentLine.startsWith("GET /login")) {
                            String user = getQueryParam(currentLine, "username");
                            String pass = getQueryParam(currentLine, "password");
                            if (user.equals(username) && pass.equals(userPassword)) {
                                isAuthenticated = true; // Autenticación exitosa
                                lastActivityTime = millis(); // Actualizar el tiempo de actividad
                                client.println("HTTP/1.1 302 Found");
                                client.println("Location: /"); // Redirigir a la página principal
                                client.println();
                            } else {
                                // Redirigir de vuelta a la página de inicio de sesión en caso de fallo
                                client.println("HTTP/1.1 302 Found");
                                client.println("Location: /login"); // Volver a la página de inicio de sesión
                                client.println();
                            }
                        }
                        // Verificar configuración de umbral
                        if (currentLine.startsWith("GET /setThresholds")) {
                            int thresh1 = getQueryParamInt(currentLine, "thresh1");
                            int thresh2 = getQueryParamInt(currentLine, "thresh2");
                            int thresh3 = getQueryParamInt(currentLine, "thresh3");
                            int thresh4 = getQueryParamInt(currentLine, "thresh4");

                            if (thresh1 > 0) {
                                threshold1 = thresh1;
                                preferences.putUInt("thresh1", threshold1); // Guardar en NVS
                            }
                            if (thresh2 > 0) {
                                threshold2 = thresh2;
                                preferences.putUInt("thresh2", threshold2); // Guardar en NVS
                            }
                            if (thresh3 > 0) {
                                threshold3 = thresh3;
                                preferences.putUInt("thresh3", threshold3); // Guardar en NVS
                            }
                            if (thresh4 > 0) {
                                threshold4 = thresh4;
                                preferences.putUInt("thresh4", threshold4); // Guardar en NVS
                            }

                            // Redirigir a la página principal
                            client.println("HTTP/1.1 302 Found");
                            client.println("Location: /");
                            client.println();
                        }
                    }
                    currentLine = "";
                } else if (c != '\r') {
                    currentLine += c;
                }
            }
        }
        client.stop();
    }

    // Verificar entradas y activar relés
    checkInputs();
}

void checkInputs() {
    // Verificar entrada 1
    bool currentInput1State = digitalRead(input1Pin);
    if (currentInput1State == HIGH) { // Si se presiona el botón
        input1Time += 100; // Acumular tiempo (incrementar en 100 ms)
        if (input1Time >= threshold1) {
            digitalWrite(relay1Pin, HIGH); // Activar relé 1
            Serial.println("Activando relé 1");
        }
    } else { // Si el botón no está presionado
        digitalWrite(relay1Pin, LOW); // Desactivar relé 1
        input1Time = 0; // Reiniciar el temporizador
    }

    // Verificar entrada 2
    bool currentInput2State = digitalRead(input2Pin);
    if (currentInput2State == HIGH) { // Si se presiona el botón
        input2Time += 100; // Acumular tiempo (incrementar en 100 ms)
        if (input2Time >= threshold2) {
            digitalWrite(relay2Pin, HIGH); // Activar relé 2
            Serial.println("Activando relé 2");
        }
    } else { // Si el botón no está presionado
        digitalWrite(relay2Pin, LOW); // Desactivar relé 2
        input2Time = 0; // Reiniciar el temporizador
    }

    // Verificar entrada 3
    bool currentInput3State = digitalRead(input3Pin);
    if (currentInput3State == HIGH) { // Si se presiona el botón
        input3Time += 100; // Acumular tiempo (incrementar en 100 ms)
        if (input3Time >= threshold3) {
            digitalWrite(relay3Pin, HIGH); // Activar relé 3
            Serial.println("Activando relé 3");
        }
    } else { // Si el botón no está presionado
        digitalWrite(relay3Pin, LOW); // Desactivar relé 3
        input3Time = 0; // Reiniciar el temporizador
    }

    // Verificar entrada 4
    bool currentInput4State = digitalRead(input4Pin);
    if (currentInput4State == HIGH) { // Si se presiona el botón
        input4Time += 100; // Acumular tiempo (incrementar en 100 ms)
        if (input4Time >= threshold4) {
            digitalWrite(relay4Pin, HIGH); // Activar relé 4
            Serial.println("Activando relé 4");
        }
    } else { // Si el botón no está presionado
        digitalWrite(relay4Pin, LOW); // Desactivar relé 4
        input4Time = 0; // Reiniciar el temporizador
    }

    // Retraso para evitar ciclos rápidos
    delay(100); // Ajustar según sea necesario
}

// Funciones para enviar páginas de inicio de sesión y principal
void sendLoginPage(WiFiClient &client) {
    client.println("HTTP/1.1 200 OK");
    client.println("Content-type:text/html");
    client.println();
    client.println("<!DOCTYPE HTML>");
    client.println("<html>");
    client.println("<head><title>Inicio de sesión</title></head>");
    client.println("<body>");
    client.println("<h1>Iniciar sesión</h1>");
    client.println("<form action=\"/login\" method=\"GET\">");
    client.println("Nombre de usuario: <input type=\"text\" name=\"username\"><br>");
    client.println("Contraseña: <input type=\"password\" name=\"password\"><br>");
    client.println("<input type=\"submit\" value=\"Iniciar sesión\">");
    client.println("</form>");
    client.println("</body>");
    client.println("</html>");
}

void sendMainPage(WiFiClient &client) {
    client.println("HTTP/1.1 200 OK");
    client.println("Content-type:text/html");
    client.println();
    client.println("<!DOCTYPE HTML>");
    client.println("<html>");
    client.println("<head><title>Configuración de umbrales</title></head>");
    client.println("<body>");
    client.println("<h1>Establecer umbrales de tiempo</h1>");
    client.println("<form action=\"/setThresholds\" method=\"GET\">");
    client.println("Umbral 1 (ms): <input type=\"text\" name=\"thresh1\" value=\"" + String(threshold1) + "\"><br>");
    client.println("Umbral 2 (ms): <input type=\"text\" name=\"thresh2\" value=\"" + String(threshold2) + "\"><br>");
    client.println("Umbral 3 (ms): <input type=\"text\" name=\"thresh3\" value=\"" + String(threshold3) + "\"><br>");
    client.println("Umbral 4 (ms): <input type=\"text\" name=\"thresh4\" value=\"" + String(threshold4) + "\"><br>");
    client.println("<input type=\"submit\" value=\"Establecer umbrales\">");
    client.println("</form>");
    client.println("</body>");
    client.println("</html>");
}

String getQueryParam(String request, String param) {
    int startIndex = request.indexOf(param + "=");
    if (startIndex == -1) return "";
    startIndex += param.length() + 1; // Moverse más allá del nombre del parámetro y '='
    int endIndex = request.indexOf("&", startIndex);
    if (endIndex == -1) endIndex = request.indexOf(" ", startIndex);
    return request.substring(startIndex, endIndex);
}

int getQueryParamInt(String request, String param) {
    String value = getQueryParam(request, param);
    return value.toInt();
}
