#include <WiFi.h>
#include <HTTPClient.h>

// Definir los números de pin para las entradas y salidas
const int input1Pin = 18;  // Entrada 1 (GPIO 32)
const int input2Pin = 19;  // Entrada 2 (GPIO 33)
const int input3Pin = 23;  // Entrada 3 (GPIO 25)
const int input4Pin = 05;  // Entrada 4 (GPIO 26)

const int relay1Pin = 14;   // Relé 1 (GPIO 12)
const int relay2Pin = 27;   // Relé 2 (GPIO 13)
const int relay3Pin = 16;   // Relé 3 (GPIO 14)
const int relay4Pin = 17;   // Relé 4 (GPIO 15)

// Umbrales de tiempo predeterminados en milisegundos
unsigned long threshold1 = 1000;  // 3 segundos
unsigned long threshold2 = 1000;  // 6 segundos
unsigned long threshold3 = 1000;  // 9 segundos
unsigned long threshold4 = 1000; // 12 segundos

// Variables para rastrear el tiempo que las entradas han estado en LOW
unsigned long input1Time = 0;
unsigned long input2Time = 0;
unsigned long input3Time = 0;
unsigned long input4Time = 0;

// Estado de las entradas
bool lastInput1State = HIGH;
bool lastInput2State = HIGH;
bool lastInput3State = HIGH;
bool lastInput4State = HIGH;

// Configuración de la red
const char* ssid = "604";  // Cambiar a tu SSID
const char* password = "Snet2017";  // Cambiar a tu contraseña

WiFiServer server(80);

void setup() {
    // Inicializar los pines de entrada con resistencias de pull-up internas
    pinMode(input1Pin, INPUT_PULLUP);
    pinMode(input2Pin, INPUT_PULLUP);
    pinMode(input3Pin, INPUT_PULLUP);
    pinMode(input4Pin, INPUT_PULLUP);
    
    // Inicializar los pines de relé
    pinMode(relay1Pin, OUTPUT);
    pinMode(relay2Pin, OUTPUT);
    pinMode(relay3Pin, OUTPUT);
    pinMode(relay4Pin, OUTPUT);
    
    // Conectar a la red WiFi
    Serial.begin(115200);
    Serial.println("Conectando a la red WiFi...");
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.println("Intentando conectar...");
    }
    Serial.println("Conectado a la red WiFi");
    
    // Iniciar el servidor HTTP
    server.begin();
    Serial.println("Servidor HTTP iniciado");
}

void loop() {
    // Verificar conexiones de clientes
    WiFiClient client = server.available();
    if (client) {
        String currentLine = "";
        while (client.connected()) {
            if (client.available()) {
                char c = client.read();
                if (c == '\n') {
                    // Si la línea actual está en blanco, estás listo para enviar una respuesta
                    if (currentLine.length() == 0) {
                        // Enviar página principal con configuración de umbrales
                        sendMainPage(client);
                        break;
                    } else {
                        // Verificar configuración de umbral
                        if (currentLine.startsWith("GET /setThresholds")) {
                            int thresh1 = getQueryParamInt(currentLine, "thresh1");
                            int thresh2 = getQueryParamInt(currentLine, "thresh2");
                            int thresh3 = getQueryParamInt(currentLine, "thresh3");
                            int thresh4 = getQueryParamInt(currentLine, "thresh4");

                            if (thresh1 > 0) threshold1 = thresh1;
                            if (thresh2 > 0) threshold2 = thresh2;
                            if (thresh3 > 0) threshold3 = thresh3;
                            if (thresh4 > 0) threshold4 = thresh4;

                            // Redirigir a la página principal
                            client.println("HTTP/1.1 302 Found");
                            client.println("Location: /");
                            client.println();
                        }
                    }
                    currentLine = "";
                } else if (c != '\r') {
                    currentLine += c;
                }
            }
        }
        client.stop();
    }

    // Verificar entradas y activar relés
    checkInputs();
}

void checkInputs() {
    // Verificar entrada 1
    bool currentInput1State = digitalRead(input1Pin);
    if (currentInput1State == LOW) { // Si se presiona el botón
        input1Time += 100; // Acumular tiempo (incrementar en 100 ms)
        if (input1Time >= threshold1) {
            digitalWrite(relay1Pin, HIGH); // Activar relé 1
            Serial.println("Activando relé 1");
        }
    } else { // Si el botón no está presionado
        digitalWrite(relay1Pin, LOW); // Desactivar relé 1
        input1Time = 0; // Reiniciar el temporizador
    }

    // Verificar entrada 2
    bool currentInput2State = digitalRead(input2Pin);
    if (currentInput2State == LOW) { // Si se presiona el botón
        input2Time += 100; // Acumular tiempo (incrementar en 100 ms)
        if (input2Time >= threshold2) {
            digitalWrite(relay2Pin, HIGH); // Activar relé 2
            Serial.println("Activando relé 2");
        }
    } else { // Si el botón no está presionado
        digitalWrite(relay2Pin, LOW); // Desactivar relé 2
        input2Time = 0; // Reiniciar el temporizador
    }

    // Verificar entrada 3
    bool currentInput3State = digitalRead(input3Pin);
    if (currentInput3State == LOW) { // Si se presiona el botón
        input3Time += 100; // Acumular tiempo (incrementar en 100 ms)
        if (input3Time >= threshold3) {
            digitalWrite(relay3Pin, HIGH); // Activar relé 3
            Serial.println("Activando relé 3");
        }
    } else { // Si el botón no está presionado
        digitalWrite(relay3Pin, LOW); // Desactivar relé 3
        input3Time = 0; // Reiniciar el temporizador
    }

    // Verificar entrada 4
    bool currentInput4State = digitalRead(input4Pin);
    if (currentInput4State == LOW) { // Si se presiona el botón
        input4Time += 100; // Acumular tiempo (incrementar en 100 ms)
        if (input4Time >= threshold4) {
            digitalWrite(relay4Pin, HIGH); // Activar relé 4
            Serial.println("Activando relé 4");
        }
    } else { // Si el botón no está presionado
        digitalWrite(relay4Pin, LOW); // Desactivar relé 4
        input4Time = 0; // Reiniciar el temporizador
    }

    // Retraso para evitar ciclos rápidos
    delay(100); // Ajustar según sea necesario
}

// Funciones para enviar páginas de inicio de sesión y principal
void sendMainPage(WiFiClient &client) {
    client.println("HTTP/1.1 200 OK");
    client.println("Content-type:text/html");
    client.println();
    client.println("<DOCTYPE HTML>");
    client.println("<html>");
    client.println("<head><title>Configuración de umbrales</title></head>");
    client.println("<body>");
    client.println("<h1>Establecer umbrales de tiempo</h1>");
    client.println("<form action=\"/setThresholds\" method=\"GET\">");
    client.println("Umbral 1 (ms): <input type=\"text\" name=\"thresh1\"><br>");
    client.println("Umbral 2 (ms): <input type=\"text\" name=\"thresh2\"><br>");
    client.println("Umbral 3 (ms): <input type=\"text\" name=\"thresh3\"><br>");
    client.println("Umbral 4 (ms): <input type=\"text\" name=\"thresh4\"><br>");
    client.println("<input type=\"submit\" value=\"Establecer umbrales\">");
    client.println("</form>");
    client.println("</body>");
    client.println("</html>");
}

String getQueryParam(String request, String param) {
    int startIndex = request.indexOf(param + "=");
    if (startIndex == -1) return "";
    startIndex += param.length() + 1; // Moverse más allá del nombre del parámetro y '='
    int endIndex = request.indexOf("&", startIndex);
    if (endIndex == -1) endIndex = request.indexOf(" ", startIndex);
    return request.substring(startIndex, endIndex);
}

int getQueryParamInt(String request, String param) {
    String value = getQueryParam(request, param);
    return value.toInt();
}
