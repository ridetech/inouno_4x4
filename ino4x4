#include <SPI.h>
#include <Ethernet.h>

// Definir los números de pin para las entradas y salidas
const int input1Pin = 8;  // Entrada 1
const int input2Pin = 9;  // Entrada 2
const int input3Pin = 10; // Entrada 3
const int input4Pin = 11; // Entrada 4

const int relay1Pin = 4;   // Relé 1
const int relay2Pin = 5;   // Relé 2
const int relay3Pin = 6;   // Relé 3
const int relay4Pin = 7;   // Relé 4

// Umbrales de tiempo predeterminados en milisegundos
unsigned long threshold1 = 3000;  // 3 segundos
unsigned long threshold2 = 6000;  // 6 segundos
unsigned long threshold3 = 9000;  // 9 segundos
unsigned long threshold4 = 12000; // 12 segundos

// Variables para rastrear el tiempo que las entradas han estado en HIGH
unsigned long input1Time = 0;
unsigned long input2Time = 0;
unsigned long input3Time = 0;
unsigned long input4Time = 0;

// Servidor Ethernet
EthernetServer server(80);

// Dirección MAC y IP para el shield Ethernet
byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };
IPAddress ip(192, 168, 1, 177);      // Cambiar a tu dirección IP deseada
IPAddress netmask(255, 255, 255, 0); // Cambiar a tu máscara de subred deseada
IPAddress gateway(192, 168, 1, 1);    // Cambiar a tu puerta de enlace deseada

// Credenciales de inicio de sesión
const char* username = "admin";
const char* password = "*****";
bool loggedIn = false;

void setup() {
    // Inicializar los pines de entrada con resistencias de pull-up internas
    pinMode(input1Pin, INPUT_PULLUP);
    pinMode(input2Pin, INPUT_PULLUP);
    pinMode(input3Pin, INPUT_PULLUP);
    pinMode(input4Pin, INPUT_PULLUP);
    
    // Inicializar los pines de relé
    pinMode(relay1Pin, OUTPUT);
    pinMode(relay2Pin, OUTPUT);
    pinMode(relay3Pin, OUTPUT);
    pinMode(relay4Pin, OUTPUT);
    
    // Iniciar la conexión Ethernet y el servidor
    Ethernet.begin(mac, ip, netmask, gateway);
    server.begin();
    
    Serial.begin(9600);
    Serial.print("El servidor está en ");
    Serial.println(Ethernet.localIP());
    
    // Probar los relés al arrancar
    testRelays();
}

void loop() {
    // Verificar conexiones de clientes
    EthernetClient client = server.available();
    if (client) {
        String currentLine = "";
        while (client.connected()) {
            if (client.available()) {
                char c = client.read();
                if (c == '\n') {
                    // Si la línea actual está en blanco, estás listo para enviar una respuesta
                    if (currentLine.length() == 0) {
                        // Verificar si el usuario ha iniciado sesión
                        if (!loggedIn) {
                            // Enviar página de inicio de sesión
                            sendLoginPage(client);
                        } else {
                            // Enviar página principal con configuración de umbrales
                            sendMainPage(client);
                        }
                        break;
                    } else {
                        // Verificar intento de inicio de sesión
                        if (currentLine.startsWith("GET /login")) {
                            String user = getQueryParam(currentLine, "username");
                            String pass = getQueryParam(currentLine, "password");
                            if (strcmp(user.c_str(), username) == 0 && strcmp(pass.c_str(), password) == 0) {
                                loggedIn = true;
                                // Redirigir a la página principal
                                client.println("HTTP/1.1 302 Found");
                                client.println("Location: /");
                                client.println();
                            } else {
                                // Redirigir de vuelta a la página de inicio de sesión en caso de fallo
                                client.println("HTTP/1.1 302 Found");
                                client.println("Location: /");
                                client.println();
                            }
                        }
                        // Verificar configuración de umbral
                        if (currentLine.startsWith("GET /setThresholds")) {
                            int thresh1 = getQueryParamInt(currentLine, "thresh1");
                            int thresh2 = getQueryParamInt(currentLine, "thresh2");
                            int thresh3 = getQueryParamInt(currentLine, "thresh3");
                            int thresh4 = getQueryParamInt(currentLine, "thresh4");

                            if (thresh1 > 0) threshold1 = thresh1;
                            if (thresh2 > 0) threshold2 = thresh2;
                            if (thresh3 > 0) threshold3 = thresh3;
                            if (thresh4 > 0) threshold4 = thresh4;

                            // Redirigir a la página principal
                            client.println("HTTP/1.1 302 Found");
                            client.println("Location: /");
                            client.println();
                        }
                    }
                    currentLine = "";
                } else if (c != '\r') {
                    currentLine += c;
                }
            }
        }
        client.stop();
    }

    // Verificar entradas y activar relés
    checkInputs();
}

void testRelays() {
    Serial.println("Probando todos los relés...");
    
    // Activar cada relé con un retraso de 2 segundos
    digitalWrite(relay1Pin, HIGH);  
    delay(2000); // Retraso de 2 segundos
    digitalWrite(relay1Pin, LOW);   // Desactivar relé 1

    digitalWrite(relay2Pin, HIGH);  
    delay(2000); // Retraso de 2 segundos
    digitalWrite(relay2Pin, LOW);   // Desactivar relé 2

    digitalWrite(relay3Pin, HIGH);  
    delay(2000); // Retraso de 2 segundos
    digitalWrite(relay3Pin, LOW);   // Desactivar relé 3

    digitalWrite(relay4Pin, HIGH);  
    delay(2000); // Retraso de 2 segundos
    digitalWrite(relay4Pin, LOW);   // Desactivar relé 4

    Serial.println("Todos los relés probados y liberados.");
}

void checkInputs() {
    // Verificar entrada 1
    if (digitalRead(input1Pin) == LOW) { // LOW significa que se presionó el botón si se usa pull-up
        input1Time += millis();
        if (input1Time >= threshold1) {
            digitalWrite(relay1Pin, HIGH); // Activar relé 1
        }
    } else {
        input1Time = 0; // Restablecer temporizador si la entrada pasa a HIGH
        digitalWrite(relay1Pin, LOW); // Asegurar que el relé 1 esté desactivado
    }

    // Verificar entrada 2
    if (digitalRead(input2Pin) == LOW) { // LOW significa que se presionó el botón si se usa pull-up
        input2Time += millis();
        if (input2Time >= threshold2) {
            digitalWrite(relay2Pin, HIGH); // Activar relé 2
        }
    } else {
        input2Time = 0; // Restablecer temporizador si la entrada pasa a HIGH
        digitalWrite(relay2Pin, LOW); // Asegurar que el relé 2 esté desactivado
    }

    // Verificar entrada 3
    if (digitalRead(input3Pin) == LOW) { // LOW significa que se presionó el botón si se usa pull-up
        input3Time += millis();
        if (input3Time >= threshold3) {
            digitalWrite(relay3Pin, HIGH); // Activar relé 3
        }
    } else {
        input3Time = 0; // Restablecer temporizador si la entrada pasa a HIGH
        digitalWrite(relay3Pin, LOW); // Asegurar que el relé 3 esté desactivado
    }

    // Verificar entrada 4
    if (digitalRead(input4Pin) == LOW) { // LOW significa que se presionó el botón si se usa pull-up
        input4Time += millis();
        if (input4Time >= threshold4) {
            digitalWrite(relay4Pin, HIGH); // Activar relé 4
        }
    } else {
        input4Time = 0; // Restablecer temporizador si la entrada pasa a HIGH
        digitalWrite(relay4Pin, LOW); // Asegurar que el relé 4 esté desactivado
    }

    // Retraso para evitar ciclos rápidos
    delay(100); // Ajustar según sea necesario
}

void sendLoginPage(EthernetClient &client) {
    client.println("HTTP/1.1 200 OK");
    client.println("Content-type:text/html");
    client.println();
    client.println("<!DOCTYPE HTML>");
    client.println("<html>");
    client.println("<head><title>Inicio de sesión</title></head>");
    client.println("<body>");
    client.println("<h1>Iniciar sesión</h1>");
    client.println("<form action=\"/login\" method=\"GET\">");
    client.println("Nombre de usuario: <input type=\"text\" name=\"username\"><br>");
    client.println("Contraseña: <input type=\"password\" name=\"password\"><br>");
    client.println("<input type=\"submit\" value=\"Iniciar sesión\">");
    client.println("</form>");
    client.println("</body>");
    client.println("</html>");
}

void sendMainPage(EthernetClient &client) {
    client.println("HTTP/1.1 200 OK");
    client.println("Content-type:text/html");
    client.println();
    client.println("<!DOCTYPE HTML>");
    client.println("<html>");
    client.println("<head><title>Configuración de umbrales</title></head>");
    client.println("<body>");
    client.println("<h1>Establecer umbrales de tiempo</h1>");
    client.println("<form action=\"/setThresholds\" method=\"GET\">");
    client.println("Umbral 1 (ms): <input type=\"text\" name=\"thresh1\"><br>");
    client.println("Umbral 2 (ms): <input type=\"text\" name=\"thresh2\"><br>");
    client.println("Umbral 3 (ms): <input type=\"text\" name=\"thresh3\"><br>");
    client.println("Umbral 4 (ms): <input type=\"text\" name=\"thresh4\"><br>");
    client.println("<input type=\"submit\" value=\"Establecer umbrales\">");
    client.println("</form>");
    client.println("</body>");
    client.println("</html>");
}

String getQueryParam(String request, String param) {
    int startIndex = request.indexOf(param + "=");
    if (startIndex == -1) return "";
    startIndex += param.length() + 1; // Moverse más allá del nombre del parámetro y '='
    int endIndex = request.indexOf("&", startIndex);
    if (endIndex == -1) endIndex = request.indexOf(" ", startIndex);
    return request.substring(startIndex, endIndex);
}

int getQueryParamInt(String request, String param) {
    String value = getQueryParam(request, param);
    return value.toInt();
}
